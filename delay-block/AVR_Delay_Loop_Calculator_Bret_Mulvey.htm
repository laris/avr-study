<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>AVR Delay Loop Calculator</title>
    <style type="text/css">
        body { font-family: Tahoma; margin: 2em }
    </style>
</head>
<body>
    <script type="text/javascript">

        function calculate(scale) {

            var cycles = Math.round(scale * document.calculator.fcpu.value.valueOf() * 1.0e6
                * document.calculator.duration.value.valueOf()
                 - document.calculator.overhead.value.valueOf());

            document.calculator.cycles.value = cycles.toString();
            return generate();
        }

        function format(s) {
            s = s.toString();
            
            for (var i = s.length - 3; i > 0; i -= 3)
                s = s.slice(0, i) + " " + s.slice(i, s.length);
                
            return s;
        }

        function generate() {

            var assembly = document.calculator.output[0].checked;
            var comment = assembly ? ";" : "//";
            var prefix = assembly ? "" : "    \"";
            var suffix = assembly ? "\n" : "\"\t\"\\n\"\n";
            var cycles = document.calculator.cycles.value.valueOf();

            var txt =
                comment + " Generated by delay loop calculator\n" +
                comment + " at http://www.bretmulvey.com/avrdelay.html\n" +
                comment + "\n" +
                comment + " Delay " + format(cycles) + " cycles\n";


            var fcpu = document.calculator.fcpu.value;
            var cps = fcpu.valueOf() * 1.0e6;
            var ns = (cycles / cps) * 1.0e9;
            txt += comment;

            var per = Math.floor(ns / 86400000000000);
            ns -= per * 86400000000000;

            if (per > 0)
                txt += " " + per + "d";

            per = Math.floor(ns / 3600000000000);
            ns -= per * 3600000000000;

            if (per > 0)
                txt += " " + per + "h";

            per = Math.floor(ns / 60000000000);
            ns -= per * 60000000000;

            if (per > 0)
                txt += " " + per + "m";

            per = Math.floor(ns / 1000000000);
            ns -= per * 1000000000;

            if (per > 0)
                txt += " " + per + "s";

            per = Math.floor(ns / 1000000);
            ns -= per * 1000000;

            if (per > 0)
                txt += " " + per + "ms";

            per = Math.floor(ns / 1000);
            ns -= per * 1000;

            if (per > 0)
                txt += " " + per + "us";

            per = Math.floor(ns);
            ns -= per;

            if (ns > 0) {
                var num = (cycles * 1000000000) % cps
                var den = cps
                var a = num
                var b = den

                while (a > 0) {
                    var c = b % a
                    b = a
                    a = c
                }

                num /= b
                den /= b
                txt += " " + per + " " + num + "/" + den + " ns\n;";
            } else if (per > 0)
                txt += " " + per + " ns";

            txt += " at " + fcpu + " MHz\n\n";

            if (!assembly) {
                txt += "asm volatile (\n";
            }

            if (cycles == 0)
                ;
            else if (cycles < 0) {
                txt += prefix + "    jmp L1955nov5" + suffix;
            }
            else if (cycles == 4) {
                if (assembly) {
                    txt += prefix + "    rjmp PC+1" + suffix +
                           prefix + "    rjmp PC+1" + suffix;
                }
                else {
                    txt += prefix + "    rjmp 1f" + suffix +
                           prefix + "1:  rjmp 2f" + suffix +
                           prefix + "2:" + suffix;
                }
            }
            else if (cycles < 12) {
                while (cycles >= 3) {
                    txt += prefix + "    lpm" + suffix;
                    cycles -= 3;
                }
                if (cycles == 2) {
                    if (assembly)
                        txt += prefix + "    rjmp PC+1" + suffix;
                    else
                        txt += prefix + "    rjmp 1f" + suffix +
                               prefix + "1:" + suffix;
                }
                else if (cycles == 1)
                    txt += prefix + "    nop" + suffix;
            }
            else {
                var length = 3;
                var depth = 1;

                while (cycles > length * 256 + depth + 8) {
                    length = length * 256 + 2;
                    depth++;
                }

                for (var i = 0; i < depth; i++) {
                    var c = Math.max(1, Math.min(256, Math.floor((cycles - 3 * (depth - i)) / length) + 1));
                    cycles -= (c - 1) * length + 3;
                    length = (length - 2) / 256;
                    if (c == 256) c = 0;
                    txt += prefix + "    ldi  r" + (i + 18).toString() + ", " + c.toString() + suffix;
                }

                var label = assembly ? "L1:" : "1: ";
                var branch = assembly ? "L1" : "1b";
                txt += prefix + label + " dec  r" + (depth + 17).toString() + suffix +
                       prefix + "    brne " + branch + suffix;

                for (var i = depth - 2; i >= 0; i--) {
                    txt += prefix + "    dec  r" + (i + 18).toString() + suffix +
                           prefix + "    brne " + branch + suffix;
                }

                while (cycles >= 3) {
                    txt += prefix + "    lpm" + suffix;
                    cycles -= 3;
                }

                if (cycles == 2) {
                    if (assembly)
                        txt += prefix + "    rjmp PC+1" + suffix;
                    else
                        txt += prefix + "    rjmp 1f" + suffix +
                               prefix + "1:" + suffix;
                }
                else if (cycles == 1) {
                    txt += prefix + "    nop" + suffix;
                }
            }

            if (!assembly) {
                txt += ");\n";
            }

            document.calculator.result.value = txt;
            return false;
        }
    </script>
    
    <h1>AVR Delay Loop Calculator</h1>

    <form name="calculator">
        <p>
            <input name="fcpu" value="8.0" /> MHz microcontroller clock frequency
        </p>
        <p>
            <input name="overhead" value="0" /> cycles for CALL/RET or other overhead
        </p>
        <p>
            <input name="duration" value="1" />
            <button onclick="return calculate(1.0e-9);">ns</button>
            <button onclick="return calculate(1.0e-6);">us</button>
            <button onclick="return calculate(0.001);">ms</button>
            <button onclick="return calculate(1.0);">s</button>
            <button onclick="return calculate(60.0);">mins</button>
            <button onclick="return calculate(3600.0);">hrs</button>
            <button onclick="return calculate(86400.0);">days</button>
        </p>
        <p>
            <input name="cycles" value="1" /> cycles
            <button onclick="return generate();">go</button>
        </p>
        <p>
            <input name="output" type="radio" value="asm" onclick="return generate() || true;" checked="checked" />assembler
            <input name="output" type="radio" value="gcc" onclick="return generate() || true;" />avr-gcc
        </p>
        
        <textarea name="result" rows="30" cols="45"></textarea>
    </form>
    
    <script>calculate(1.0);</script>
    
</body>
</html>
